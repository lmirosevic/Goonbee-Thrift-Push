//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var GoonbeeSharedThriftService_ttypes = require('./GoonbeeSharedThriftService_types')


var GoonbeeSharedThriftService = require('./GoonbeeSharedThriftService')
var GoonbeeSharedThriftServiceClient = GoonbeeSharedThriftService.Client
var GoonbeeSharedThriftServiceProcessor = GoonbeeSharedThriftService.Processor
var ttypes = require('./GoonbeePushService_types');
//HELPER FUNCTIONS AND STRUCTURES

GBPushService.GoonbeePushService_setChannelSubscriptionStatus_args = function(args) {
  this.pushToken = null;
  this.channel = null;
  this.subscriptionStatus = null;
  if (args) {
    if (args.pushToken !== undefined) {
      this.pushToken = args.pushToken;
    }
    if (args.channel !== undefined) {
      this.channel = args.channel;
    }
    if (args.subscriptionStatus !== undefined) {
      this.subscriptionStatus = args.subscriptionStatus;
    }
  }
};
GBPushService.GoonbeePushService_setChannelSubscriptionStatus_args.prototype = {};
GBPushService.GoonbeePushService_setChannelSubscriptionStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pushToken = new ttypes.PushToken();
        this.pushToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.channel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.subscriptionStatus = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBPushService.GoonbeePushService_setChannelSubscriptionStatus_args.prototype.write = function(output) {
  output.writeStructBegin('GoonbeePushService_setChannelSubscriptionStatus_args');
  if (this.pushToken !== null && this.pushToken !== undefined) {
    output.writeFieldBegin('pushToken', Thrift.Type.STRUCT, 1);
    this.pushToken.write(output);
    output.writeFieldEnd();
  }
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.STRING, 2);
    output.writeString(this.channel);
    output.writeFieldEnd();
  }
  if (this.subscriptionStatus !== null && this.subscriptionStatus !== undefined) {
    output.writeFieldBegin('subscriptionStatus', Thrift.Type.BOOL, 3);
    output.writeBool(this.subscriptionStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBPushService.GoonbeePushService_setChannelSubscriptionStatus_result = function(args) {
};
GBPushService.GoonbeePushService_setChannelSubscriptionStatus_result.prototype = {};
GBPushService.GoonbeePushService_setChannelSubscriptionStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBPushService.GoonbeePushService_setChannelSubscriptionStatus_result.prototype.write = function(output) {
  output.writeStructBegin('GoonbeePushService_setChannelSubscriptionStatus_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBPushService.GoonbeePushService_subsriptions_args = function(args) {
  this.pushToken = null;
  this.range = null;
  if (args) {
    if (args.pushToken !== undefined) {
      this.pushToken = args.pushToken;
    }
    if (args.range !== undefined) {
      this.range = args.range;
    }
  }
};
GBPushService.GoonbeePushService_subsriptions_args.prototype = {};
GBPushService.GoonbeePushService_subsriptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pushToken = new ttypes.PushToken();
        this.pushToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.range = new ttypes.Range();
        this.range.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBPushService.GoonbeePushService_subsriptions_args.prototype.write = function(output) {
  output.writeStructBegin('GoonbeePushService_subsriptions_args');
  if (this.pushToken !== null && this.pushToken !== undefined) {
    output.writeFieldBegin('pushToken', Thrift.Type.STRUCT, 1);
    this.pushToken.write(output);
    output.writeFieldEnd();
  }
  if (this.range !== null && this.range !== undefined) {
    output.writeFieldBegin('range', Thrift.Type.STRUCT, 2);
    this.range.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBPushService.GoonbeePushService_subsriptions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
GBPushService.GoonbeePushService_subsriptions_result.prototype = {};
GBPushService.GoonbeePushService_subsriptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBPushService.GoonbeePushService_subsriptions_result.prototype.write = function(output) {
  output.writeStructBegin('GoonbeePushService_subsriptions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBPushService.GoonbeePushService_subsriptionStatus_args = function(args) {
  this.pushToken = null;
  this.channel = null;
  if (args) {
    if (args.pushToken !== undefined) {
      this.pushToken = args.pushToken;
    }
    if (args.channel !== undefined) {
      this.channel = args.channel;
    }
  }
};
GBPushService.GoonbeePushService_subsriptionStatus_args.prototype = {};
GBPushService.GoonbeePushService_subsriptionStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pushToken = new ttypes.PushToken();
        this.pushToken.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.channel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBPushService.GoonbeePushService_subsriptionStatus_args.prototype.write = function(output) {
  output.writeStructBegin('GoonbeePushService_subsriptionStatus_args');
  if (this.pushToken !== null && this.pushToken !== undefined) {
    output.writeFieldBegin('pushToken', Thrift.Type.STRUCT, 1);
    this.pushToken.write(output);
    output.writeFieldEnd();
  }
  if (this.channel !== null && this.channel !== undefined) {
    output.writeFieldBegin('channel', Thrift.Type.STRING, 2);
    output.writeString(this.channel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBPushService.GoonbeePushService_subsriptionStatus_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
GBPushService.GoonbeePushService_subsriptionStatus_result.prototype = {};
GBPushService.GoonbeePushService_subsriptionStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GBPushService.GoonbeePushService_subsriptionStatus_result.prototype.write = function(output) {
  output.writeStructBegin('GoonbeePushService_subsriptionStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GBPushService.GoonbeePushServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
Thrift.inherits(GBPushService.GoonbeePushServiceClient, GoonbeeSharedThriftServiceClient)
GBPushService.GoonbeePushServiceClient.prototype.setChannelSubscriptionStatus = function(pushToken, channel, subscriptionStatus, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_setChannelSubscriptionStatus(pushToken, channel, subscriptionStatus);
};

GBPushService.GoonbeePushServiceClient.prototype.send_setChannelSubscriptionStatus = function(pushToken, channel, subscriptionStatus) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setChannelSubscriptionStatus', Thrift.MessageType.CALL, this.seqid);
  var args = new GBPushService.GoonbeePushService_setChannelSubscriptionStatus_args();
  args.pushToken = pushToken;
  args.channel = channel;
  args.subscriptionStatus = subscriptionStatus;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

GBPushService.GoonbeePushServiceClient.prototype.recv_setChannelSubscriptionStatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new GBPushService.GoonbeePushService_setChannelSubscriptionStatus_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
GBPushService.GoonbeePushServiceClient.prototype.subsriptions = function(pushToken, range, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_subsriptions(pushToken, range);
};

GBPushService.GoonbeePushServiceClient.prototype.send_subsriptions = function(pushToken, range) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('subsriptions', Thrift.MessageType.CALL, this.seqid);
  var args = new GBPushService.GoonbeePushService_subsriptions_args();
  args.pushToken = pushToken;
  args.range = range;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

GBPushService.GoonbeePushServiceClient.prototype.recv_subsriptions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new GBPushService.GoonbeePushService_subsriptions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('subsriptions failed: unknown result');
};
GBPushService.GoonbeePushServiceClient.prototype.subsriptionStatus = function(pushToken, channel, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_subsriptionStatus(pushToken, channel);
};

GBPushService.GoonbeePushServiceClient.prototype.send_subsriptionStatus = function(pushToken, channel) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('subsriptionStatus', Thrift.MessageType.CALL, this.seqid);
  var args = new GBPushService.GoonbeePushService_subsriptionStatus_args();
  args.pushToken = pushToken;
  args.channel = channel;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

GBPushService.GoonbeePushServiceClient.prototype.recv_subsriptionStatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new GBPushService.GoonbeePushService_subsriptionStatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('subsriptionStatus failed: unknown result');
};
GBPushService.GoonbeePushServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
Thrift.inherits(GBPushService.GoonbeePushServiceProcessor, GoonbeeSharedThriftServiceProcessor)
GBPushService.GoonbeePushServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

GBPushService.GoonbeePushServiceProcessor.prototype.process_setChannelSubscriptionStatus = function(seqid, input, output) {
  var args = new GBPushService.GoonbeePushService_setChannelSubscriptionStatus_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.setChannelSubscriptionStatus(args.pushToken, args.channel, args.subscriptionStatus, function (err, result) {
    var result = new GBPushService.GoonbeePushService_setChannelSubscriptionStatus_result((err != null ? err : {success: result}));
    output.writeMessageBegin("setChannelSubscriptionStatus", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

GBPushService.GoonbeePushServiceProcessor.prototype.process_subsriptions = function(seqid, input, output) {
  var args = new GBPushService.GoonbeePushService_subsriptions_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.subsriptions(args.pushToken, args.range, function (err, result) {
    var result = new GBPushService.GoonbeePushService_subsriptions_result((err != null ? err : {success: result}));
    output.writeMessageBegin("subsriptions", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

GBPushService.GoonbeePushServiceProcessor.prototype.process_subsriptionStatus = function(seqid, input, output) {
  var args = new GBPushService.GoonbeePushService_subsriptionStatus_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.subsriptionStatus(args.pushToken, args.channel, function (err, result) {
    var result = new GBPushService.GoonbeePushService_subsriptionStatus_result((err != null ? err : {success: result}));
    output.writeMessageBegin("subsriptionStatus", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

