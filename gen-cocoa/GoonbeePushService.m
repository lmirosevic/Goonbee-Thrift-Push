/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"

#import "GoonbeeSharedThriftService.h"

#import "GoonbeePushService.h"

@implementation GBPushRequestError

- (id) init
{
  return [super initWithName: @"RequestError" reason: @"unknown" userInfo: nil];
}

- (id) initWithStatus: (int) status message: (NSString *) message
{
  self = [self init];
  __status = status;
  __status_isset = YES;
  __message = [message retain_stub];
  __message_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super initWithCoder: decoder];
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeIntForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"message"])
  {
    __message = [[decoder decodeObjectForKey: @"message"] retain_stub];
    __message_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  [super encodeWithCoder: encoder];
  if (__status_isset)
  {
    [encoder encodeInt: __status forKey: @"status"];
  }
  if (__message_isset)
  {
    [encoder encodeObject: __message forKey: @"message"];
  }
}

- (void) dealloc
{
  [__message release_stub];
  [super dealloc_stub];
}

- (int) status {
  return __status;
}

- (void) setStatus: (int) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (NSString *) message {
  return [[__message retain_stub] autorelease_stub];
}

- (void) setMessage: (NSString *) message {
  [message retain_stub];
  [__message release_stub];
  __message = message;
  __message_isset = YES;
}

- (BOOL) messageIsSet {
  return __message_isset;
}

- (void) unsetMessage {
  [__message release_stub];
  __message = nil;
  __message_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMessage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RequestError"];
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__message_isset) {
    if (__message != nil) {
      [outProtocol writeFieldBeginWithName: @"message" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __message];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RequestError("];
  [ms appendString: @"status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",message:"];
  [ms appendFormat: @"\"%@\"", __message];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GBPushRange

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithDirection: (int) direction index: (int32_t) index length: (int32_t) length
{
  self = [super init];
  __direction = direction;
  __direction_isset = YES;
  __index = index;
  __index_isset = YES;
  __length = length;
  __length_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"direction"])
  {
    __direction = [decoder decodeIntForKey: @"direction"];
    __direction_isset = YES;
  }
  if ([decoder containsValueForKey: @"index"])
  {
    __index = [decoder decodeInt32ForKey: @"index"];
    __index_isset = YES;
  }
  if ([decoder containsValueForKey: @"length"])
  {
    __length = [decoder decodeInt32ForKey: @"length"];
    __length_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__direction_isset)
  {
    [encoder encodeInt: __direction forKey: @"direction"];
  }
  if (__index_isset)
  {
    [encoder encodeInt32: __index forKey: @"index"];
  }
  if (__length_isset)
  {
    [encoder encodeInt32: __length forKey: @"length"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int) direction {
  return __direction;
}

- (void) setDirection: (int) direction {
  __direction = direction;
  __direction_isset = YES;
}

- (BOOL) directionIsSet {
  return __direction_isset;
}

- (void) unsetDirection {
  __direction_isset = NO;
}

- (int32_t) index {
  return __index;
}

- (void) setIndex: (int32_t) index {
  __index = index;
  __index_isset = YES;
}

- (BOOL) indexIsSet {
  return __index_isset;
}

- (void) unsetIndex {
  __index_isset = NO;
}

- (int32_t) length {
  return __length;
}

- (void) setLength: (int32_t) length {
  __length = length;
  __length_isset = YES;
}

- (BOOL) lengthIsSet {
  return __length_isset;
}

- (void) unsetLength {
  __length_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setDirection: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIndex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLength: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Range"];
  if (__direction_isset) {
    [outProtocol writeFieldBeginWithName: @"direction" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __direction];
    [outProtocol writeFieldEnd];
  }
  if (__index_isset) {
    [outProtocol writeFieldBeginWithName: @"index" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __index];
    [outProtocol writeFieldEnd];
  }
  if (__length_isset) {
    [outProtocol writeFieldBeginWithName: @"length" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __length];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Range("];
  [ms appendString: @"direction:"];
  [ms appendFormat: @"%i", __direction];
  [ms appendString: @",index:"];
  [ms appendFormat: @"%i", __index];
  [ms appendString: @",length:"];
  [ms appendFormat: @"%i", __length];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GBPushPushToken

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithType: (int) type token: (NSString *) token
{
  self = [super init];
  __type = type;
  __type_isset = YES;
  __token = [token retain_stub];
  __token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"PushToken"];
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"PushToken("];
  [ms appendString: @"type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation GBPushGoonbeePushServiceConstants
+ (void) initialize {
}
@end

@interface GBPushsetChannelSubscriptionStatus_args : NSObject <TBase, NSCoding> {
  GBPushPushToken * __pushToken;
  NSString * __channel;
  BOOL __subscriptionStatus;

  BOOL __pushToken_isset;
  BOOL __channel_isset;
  BOOL __subscriptionStatus_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=pushToken, setter=setPushToken:) GBPushPushToken * pushToken;
@property (nonatomic, retain, getter=channel, setter=setChannel:) NSString * channel;
@property (nonatomic, getter=subscriptionStatus, setter=setSubscriptionStatus:) BOOL subscriptionStatus;
#endif

- (id) init;
- (id) initWithPushToken: (GBPushPushToken *) pushToken channel: (NSString *) channel subscriptionStatus: (BOOL) subscriptionStatus;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GBPushPushToken *) pushToken;
- (void) setPushToken: (GBPushPushToken *) pushToken;
#endif
- (BOOL) pushTokenIsSet;

#if !__has_feature(objc_arc)
- (NSString *) channel;
- (void) setChannel: (NSString *) channel;
#endif
- (BOOL) channelIsSet;

#if !__has_feature(objc_arc)
- (BOOL) subscriptionStatus;
- (void) setSubscriptionStatus: (BOOL) subscriptionStatus;
#endif
- (BOOL) subscriptionStatusIsSet;

@end

@implementation GBPushsetChannelSubscriptionStatus_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPushToken: (GBPushPushToken *) pushToken channel: (NSString *) channel subscriptionStatus: (BOOL) subscriptionStatus
{
  self = [super init];
  __pushToken = [pushToken retain_stub];
  __pushToken_isset = YES;
  __channel = [channel retain_stub];
  __channel_isset = YES;
  __subscriptionStatus = subscriptionStatus;
  __subscriptionStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"pushToken"])
  {
    __pushToken = [[decoder decodeObjectForKey: @"pushToken"] retain_stub];
    __pushToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"channel"])
  {
    __channel = [[decoder decodeObjectForKey: @"channel"] retain_stub];
    __channel_isset = YES;
  }
  if ([decoder containsValueForKey: @"subscriptionStatus"])
  {
    __subscriptionStatus = [decoder decodeBoolForKey: @"subscriptionStatus"];
    __subscriptionStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__pushToken_isset)
  {
    [encoder encodeObject: __pushToken forKey: @"pushToken"];
  }
  if (__channel_isset)
  {
    [encoder encodeObject: __channel forKey: @"channel"];
  }
  if (__subscriptionStatus_isset)
  {
    [encoder encodeBool: __subscriptionStatus forKey: @"subscriptionStatus"];
  }
}

- (void) dealloc
{
  [__pushToken release_stub];
  [__channel release_stub];
  [super dealloc_stub];
}

- (GBPushPushToken *) pushToken {
  return [[__pushToken retain_stub] autorelease_stub];
}

- (void) setPushToken: (GBPushPushToken *) pushToken {
  [pushToken retain_stub];
  [__pushToken release_stub];
  __pushToken = pushToken;
  __pushToken_isset = YES;
}

- (BOOL) pushTokenIsSet {
  return __pushToken_isset;
}

- (void) unsetPushToken {
  [__pushToken release_stub];
  __pushToken = nil;
  __pushToken_isset = NO;
}

- (NSString *) channel {
  return [[__channel retain_stub] autorelease_stub];
}

- (void) setChannel: (NSString *) channel {
  [channel retain_stub];
  [__channel release_stub];
  __channel = channel;
  __channel_isset = YES;
}

- (BOOL) channelIsSet {
  return __channel_isset;
}

- (void) unsetChannel {
  [__channel release_stub];
  __channel = nil;
  __channel_isset = NO;
}

- (BOOL) subscriptionStatus {
  return __subscriptionStatus;
}

- (void) setSubscriptionStatus: (BOOL) subscriptionStatus {
  __subscriptionStatus = subscriptionStatus;
  __subscriptionStatus_isset = YES;
}

- (BOOL) subscriptionStatusIsSet {
  return __subscriptionStatus_isset;
}

- (void) unsetSubscriptionStatus {
  __subscriptionStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GBPushPushToken *fieldValue = [[GBPushPushToken alloc] init];
          [fieldValue read: inProtocol];
          [self setPushToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setChannel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSubscriptionStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"setChannelSubscriptionStatus_args"];
  if (__pushToken_isset) {
    if (__pushToken != nil) {
      [outProtocol writeFieldBeginWithName: @"pushToken" type: TType_STRUCT fieldID: 1];
      [__pushToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__channel_isset) {
    if (__channel != nil) {
      [outProtocol writeFieldBeginWithName: @"channel" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __channel];
      [outProtocol writeFieldEnd];
    }
  }
  if (__subscriptionStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"subscriptionStatus" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __subscriptionStatus];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"setChannelSubscriptionStatus_args("];
  [ms appendString: @"pushToken:"];
  [ms appendFormat: @"%@", __pushToken];
  [ms appendString: @",channel:"];
  [ms appendFormat: @"\"%@\"", __channel];
  [ms appendString: @",subscriptionStatus:"];
  [ms appendFormat: @"%i", __subscriptionStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBPushSetChannelSubscriptionStatus_result : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation GBPushSetChannelSubscriptionStatus_result

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetChannelSubscriptionStatus_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetChannelSubscriptionStatus_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBPushsubsriptions_args : NSObject <TBase, NSCoding> {
  GBPushPushToken * __pushToken;
  GBPushRange * __range;

  BOOL __pushToken_isset;
  BOOL __range_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=pushToken, setter=setPushToken:) GBPushPushToken * pushToken;
@property (nonatomic, retain, getter=range, setter=setRange:) GBPushRange * range;
#endif

- (id) init;
- (id) initWithPushToken: (GBPushPushToken *) pushToken range: (GBPushRange *) range;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GBPushPushToken *) pushToken;
- (void) setPushToken: (GBPushPushToken *) pushToken;
#endif
- (BOOL) pushTokenIsSet;

#if !__has_feature(objc_arc)
- (GBPushRange *) range;
- (void) setRange: (GBPushRange *) range;
#endif
- (BOOL) rangeIsSet;

@end

@implementation GBPushsubsriptions_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPushToken: (GBPushPushToken *) pushToken range: (GBPushRange *) range
{
  self = [super init];
  __pushToken = [pushToken retain_stub];
  __pushToken_isset = YES;
  __range = [range retain_stub];
  __range_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"pushToken"])
  {
    __pushToken = [[decoder decodeObjectForKey: @"pushToken"] retain_stub];
    __pushToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"range"])
  {
    __range = [[decoder decodeObjectForKey: @"range"] retain_stub];
    __range_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__pushToken_isset)
  {
    [encoder encodeObject: __pushToken forKey: @"pushToken"];
  }
  if (__range_isset)
  {
    [encoder encodeObject: __range forKey: @"range"];
  }
}

- (void) dealloc
{
  [__pushToken release_stub];
  [__range release_stub];
  [super dealloc_stub];
}

- (GBPushPushToken *) pushToken {
  return [[__pushToken retain_stub] autorelease_stub];
}

- (void) setPushToken: (GBPushPushToken *) pushToken {
  [pushToken retain_stub];
  [__pushToken release_stub];
  __pushToken = pushToken;
  __pushToken_isset = YES;
}

- (BOOL) pushTokenIsSet {
  return __pushToken_isset;
}

- (void) unsetPushToken {
  [__pushToken release_stub];
  __pushToken = nil;
  __pushToken_isset = NO;
}

- (GBPushRange *) range {
  return [[__range retain_stub] autorelease_stub];
}

- (void) setRange: (GBPushRange *) range {
  [range retain_stub];
  [__range release_stub];
  __range = range;
  __range_isset = YES;
}

- (BOOL) rangeIsSet {
  return __range_isset;
}

- (void) unsetRange {
  [__range release_stub];
  __range = nil;
  __range_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GBPushPushToken *fieldValue = [[GBPushPushToken alloc] init];
          [fieldValue read: inProtocol];
          [self setPushToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          GBPushRange *fieldValue = [[GBPushRange alloc] init];
          [fieldValue read: inProtocol];
          [self setRange: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"subsriptions_args"];
  if (__pushToken_isset) {
    if (__pushToken != nil) {
      [outProtocol writeFieldBeginWithName: @"pushToken" type: TType_STRUCT fieldID: 1];
      [__pushToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__range_isset) {
    if (__range != nil) {
      [outProtocol writeFieldBeginWithName: @"range" type: TType_STRUCT fieldID: 2];
      [__range write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"subsriptions_args("];
  [ms appendString: @"pushToken:"];
  [ms appendFormat: @"%@", __pushToken];
  [ms appendString: @",range:"];
  [ms appendFormat: @"%@", __range];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBPushSubsriptions_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GBPushSubsriptions_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Subsriptions_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__success count]];
        int i4;
        for (i4 = 0; i4 < [__success count]; i4++)
        {
          [outProtocol writeString: [__success objectAtIndex: i4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Subsriptions_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBPushsubsriptionStatus_args : NSObject <TBase, NSCoding> {
  GBPushPushToken * __pushToken;
  NSString * __channel;

  BOOL __pushToken_isset;
  BOOL __channel_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=pushToken, setter=setPushToken:) GBPushPushToken * pushToken;
@property (nonatomic, retain, getter=channel, setter=setChannel:) NSString * channel;
#endif

- (id) init;
- (id) initWithPushToken: (GBPushPushToken *) pushToken channel: (NSString *) channel;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GBPushPushToken *) pushToken;
- (void) setPushToken: (GBPushPushToken *) pushToken;
#endif
- (BOOL) pushTokenIsSet;

#if !__has_feature(objc_arc)
- (NSString *) channel;
- (void) setChannel: (NSString *) channel;
#endif
- (BOOL) channelIsSet;

@end

@implementation GBPushsubsriptionStatus_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPushToken: (GBPushPushToken *) pushToken channel: (NSString *) channel
{
  self = [super init];
  __pushToken = [pushToken retain_stub];
  __pushToken_isset = YES;
  __channel = [channel retain_stub];
  __channel_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"pushToken"])
  {
    __pushToken = [[decoder decodeObjectForKey: @"pushToken"] retain_stub];
    __pushToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"channel"])
  {
    __channel = [[decoder decodeObjectForKey: @"channel"] retain_stub];
    __channel_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__pushToken_isset)
  {
    [encoder encodeObject: __pushToken forKey: @"pushToken"];
  }
  if (__channel_isset)
  {
    [encoder encodeObject: __channel forKey: @"channel"];
  }
}

- (void) dealloc
{
  [__pushToken release_stub];
  [__channel release_stub];
  [super dealloc_stub];
}

- (GBPushPushToken *) pushToken {
  return [[__pushToken retain_stub] autorelease_stub];
}

- (void) setPushToken: (GBPushPushToken *) pushToken {
  [pushToken retain_stub];
  [__pushToken release_stub];
  __pushToken = pushToken;
  __pushToken_isset = YES;
}

- (BOOL) pushTokenIsSet {
  return __pushToken_isset;
}

- (void) unsetPushToken {
  [__pushToken release_stub];
  __pushToken = nil;
  __pushToken_isset = NO;
}

- (NSString *) channel {
  return [[__channel retain_stub] autorelease_stub];
}

- (void) setChannel: (NSString *) channel {
  [channel retain_stub];
  [__channel release_stub];
  __channel = channel;
  __channel_isset = YES;
}

- (BOOL) channelIsSet {
  return __channel_isset;
}

- (void) unsetChannel {
  [__channel release_stub];
  __channel = nil;
  __channel_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          GBPushPushToken *fieldValue = [[GBPushPushToken alloc] init];
          [fieldValue read: inProtocol];
          [self setPushToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setChannel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"subsriptionStatus_args"];
  if (__pushToken_isset) {
    if (__pushToken != nil) {
      [outProtocol writeFieldBeginWithName: @"pushToken" type: TType_STRUCT fieldID: 1];
      [__pushToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__channel_isset) {
    if (__channel != nil) {
      [outProtocol writeFieldBeginWithName: @"channel" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __channel];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"subsriptionStatus_args("];
  [ms appendString: @"pushToken:"];
  [ms appendFormat: @"%@", __pushToken];
  [ms appendString: @",channel:"];
  [ms appendFormat: @"\"%@\"", __channel];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GBPushSubsriptionStatus_result : NSObject <TBase, NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GBPushSubsriptionStatus_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SubsriptionStatus_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SubsriptionStatus_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GBPushGoonbeePushServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_setChannelSubscriptionStatus: (GBPushPushToken *) pushToken channel: (NSString *) channel subscriptionStatus: (BOOL) subscriptionStatus
{
  [outProtocol writeMessageBeginWithName: @"setChannelSubscriptionStatus" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"setChannelSubscriptionStatus_args"];
  if (pushToken != nil)  {
    [outProtocol writeFieldBeginWithName: @"pushToken" type: TType_STRUCT fieldID: 1];
    [pushToken write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (channel != nil)  {
    [outProtocol writeFieldBeginWithName: @"channel" type: TType_STRING fieldID: 2];
    [outProtocol writeString: channel];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"subscriptionStatus" type: TType_BOOL fieldID: 3];
  [outProtocol writeBool: subscriptionStatus];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_setChannelSubscriptionStatus
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GBPushSetChannelSubscriptionStatus_result * result = [[[GBPushSetChannelSubscriptionStatus_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) setChannelSubscriptionStatus: (GBPushPushToken *) pushToken channel: (NSString *) channel subscriptionStatus: (BOOL) subscriptionStatus
{
  [self send_setChannelSubscriptionStatus : pushToken channel: channel subscriptionStatus: subscriptionStatus];
  [self recv_setChannelSubscriptionStatus];
}

- (void) send_subsriptions: (GBPushPushToken *) pushToken range: (GBPushRange *) range
{
  [outProtocol writeMessageBeginWithName: @"subsriptions" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"subsriptions_args"];
  if (pushToken != nil)  {
    [outProtocol writeFieldBeginWithName: @"pushToken" type: TType_STRUCT fieldID: 1];
    [pushToken write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (range != nil)  {
    [outProtocol writeFieldBeginWithName: @"range" type: TType_STRUCT fieldID: 2];
    [range write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_subsriptions
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GBPushSubsriptions_result * result = [[[GBPushSubsriptions_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"subsriptions failed: unknown result"];
}

- (NSMutableArray *) subsriptions: (GBPushPushToken *) pushToken range: (GBPushRange *) range
{
  [self send_subsriptions : pushToken range: range];
  return [self recv_subsriptions];
}

- (void) send_subsriptionStatus: (GBPushPushToken *) pushToken channel: (NSString *) channel
{
  [outProtocol writeMessageBeginWithName: @"subsriptionStatus" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"subsriptionStatus_args"];
  if (pushToken != nil)  {
    [outProtocol writeFieldBeginWithName: @"pushToken" type: TType_STRUCT fieldID: 1];
    [pushToken write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (channel != nil)  {
    [outProtocol writeFieldBeginWithName: @"channel" type: TType_STRING fieldID: 2];
    [outProtocol writeString: channel];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_subsriptionStatus
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GBPushSubsriptionStatus_result * result = [[[GBPushSubsriptionStatus_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"subsriptionStatus failed: unknown result"];
}

- (BOOL) subsriptionStatus: (GBPushPushToken *) pushToken channel: (NSString *) channel
{
  [self send_subsriptionStatus : pushToken channel: channel];
  return [self recv_subsriptionStatus];
}

@end

@implementation GBPushGoonbeePushServiceProcessor

- (id) initWithGoonbeePushService: (id <GBPushGoonbeePushService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_setChannelSubscriptionStatus_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"setChannelSubscriptionStatus"];
  }
  {
    SEL s = @selector(process_subsriptions_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"subsriptions"];
  }
  {
    SEL s = @selector(process_subsriptionStatus_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"subsriptionStatus"];
  }
  return self;
}

- (id<GBPushGoonbeePushService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_setChannelSubscriptionStatus_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GBPushsetChannelSubscriptionStatus_args * args = [[GBPushsetChannelSubscriptionStatus_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GBPushSetChannelSubscriptionStatus_result * result = [[GBPushSetChannelSubscriptionStatus_result alloc] init];
  [mService setChannelSubscriptionStatus: [args pushToken] channel: [args channel] subscriptionStatus: [args subscriptionStatus]];
  [outProtocol writeMessageBeginWithName: @"setChannelSubscriptionStatus"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_subsriptions_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GBPushsubsriptions_args * args = [[GBPushsubsriptions_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GBPushSubsriptions_result * result = [[GBPushSubsriptions_result alloc] init];
  [result setSuccess: [mService subsriptions: [args pushToken] range: [args range]]];
  [outProtocol writeMessageBeginWithName: @"subsriptions"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_subsriptionStatus_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  GBPushsubsriptionStatus_args * args = [[GBPushsubsriptionStatus_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GBPushSubsriptionStatus_result * result = [[GBPushSubsriptionStatus_result alloc] init];
  [result setSuccess: [mService subsriptionStatus: [args pushToken] channel: [args channel]]];
  [outProtocol writeMessageBeginWithName: @"subsriptionStatus"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

